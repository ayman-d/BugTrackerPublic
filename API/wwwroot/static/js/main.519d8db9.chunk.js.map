{"version":3,"sources":["features/home/HomePage.tsx","features/nav/NavBar.tsx","features/bugs/dashboard/BugListing.tsx","app/stores/bugStore.ts","app/layout/LoadingComponent.tsx","features/bugs/dashboard/BugsDashboard.tsx","features/bugs/details/BugsDetails.tsx","features/bugs/form/BugForm.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["HomePage","style","divsssStyle","pStyles","spanStyles","backgroundColor","padding","margin","maxWidth","fontWeight","fontSize","color","textDecoration","NavBar","Menu","fixed","inverted","Container","Item","as","NavLink","exact","to","position","Button","height","marginRight","name","Icon","BugListing","bug","newDate","Date","timeDiff","parse","toJSON","split","createdOn","timeElapsed","Math","round","days","floor","hours","Card","raised","fluid","Content","header","title","whiteSpace","overflow","extra","Grid","Column","width","verticalAlign","priority","Label","marginTop","marginLeft","ribbon","category","description","columns","admin","developer","status","toLowerCase","key","axios","defaults","baseURL","process","configure","enforceActions","BugStore","Array","from","this","bugRegistry","values","sort","a","b","filter","creatdOn","observable","Map","computed","action","loading","get","bugs","runInAction","data","forEach","set","id","console","log","post","put","delete","target","createContext","LoadingComponent","content","Dimmer","active","Loader","buttonStyles","border","clickedStyles","buttonDivStyles","textAlign","observer","bugStore","useContext","useEffect","loadBugs","bugsByDate","openBugs","closedBugs","useState","query","setQuery","stackable","container","onClick","map","headersStyle","match","history","loadBug","deleteBug","params","date","time","slice","Segment","marginBottom","floated","divided","Row","toUpperCase","size","Header","Link","window","confirm","then","push","warningStyle","existingBug","createBug","clearBug","editBug","resolvedOn","setBug","open","setOpen","handleInputChange","e","currentTarget","value","length","Form","onSubmit","newBug","uuid","Field","autoFocus","onChange","placeholder","TextArea","rows","Group","centered","padded","type","Modal","closeIcon","onClose","onOpen","icon","Actions","withRouter","location","path","component","BugsDashboard","BugsDetails","BugForm","Boolean","hostname","children","pathname","scrollTo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.519d8db9.chunk.js","sourcesContent":["import React, { CSSProperties } from \"react\";\n\nconst HomePage = () => {\n  return (\n    <div style={divsssStyle}>\n      <h1>Ticket Tracker App</h1>\n      <p style={pStyles}>\n        Welcome to the ticket tracker app,{\" \"}\n        <span style={spanStyles}>\n          please click on \"Tickets\" in the navigation menu\n        </span>{\" \"}\n        to view a demo of the ticket tracking functionality with ability to\n        create, read, update, and delete tickets\n      </p>\n      <hr />\n      <p>Features in development:</p>\n      <ul>\n        <li>Login and subscribe functionality</li>\n        <li>\n          Autherization based features based on different levels of user\n          (admins/developers)\n        </li>\n        <li>Refined styling for mobile devices</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default HomePage;\n\nconst divsssStyle: CSSProperties = {\n  backgroundColor: \"#f9f8f0\",\n  padding: \"35px\",\n  margin: \"300px auto\",\n  maxWidth: \"600px\",\n};\n\nconst pStyles: CSSProperties = {\n  fontWeight: 900,\n  fontSize: \"18px\",\n};\n\nconst spanStyles: CSSProperties = {\n  color: \"rgb(25, 170, 120)\",\n  textDecoration: \"underline\",\n};\n","import React from \"react\";\nimport { Menu, Container, Icon, Button } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <Menu fixed=\"top\" inverted>\n      <Container>\n        <Menu.Item as={NavLink} exact to=\"/\">\n          Home\n        </Menu.Item>\n        <Menu.Item as={NavLink} exact to=\"/bugs\">\n          Tickets\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Button\n            as={NavLink}\n            exact\n            to=\"/createBug\"\n            style={{\n              height: \"auto\",\n              margin: \"auto\",\n              marginRight: \"1rem\",\n            }}\n            color=\"teal\"\n            inverted\n          >\n            Create New Ticket\n          </Button>\n          <Menu.Item name=\"username\">\n            {\" \"}\n            <Icon name=\"user\"></Icon> Test User\n          </Menu.Item>\n          <Menu.Item name=\"logout\">Logout</Menu.Item>\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Card, Icon, Grid, Label } from \"semantic-ui-react\";\nimport IBug from \"../../../app/models/bug\";\n\nconst BugListing: React.FC<{ bug: IBug }> = ({ bug }) => {\n  let newDate = new Date();\n  let currentTime = Date.parse(newDate.toJSON().split(\"Z\")[0]);\n  const timeDiff = currentTime - Date.parse(bug.createdOn);\n  const timeElapsed = Math.round(timeDiff / (1000 * 60 * 60));\n  const days = Math.floor(timeElapsed / 24);\n  const hours = Math.floor(timeElapsed % 24);\n\n  // description max length\n  // let descriptionText: string;\n  // if (bug.description.length >= 280) {\n  //   descriptionText = bug.description.substring(0, 280) + \"...\";\n  // } else {\n  //   descriptionText = bug.description;\n  // }\n\n  return (\n    <Card color=\"olive\" raised fluid style={{ backgroundColor: \"#f9f8f0\" }}>\n      <Card.Content\n        header={bug.title}\n        style={{\n          height: \"60px\",\n          whiteSpace: \"pre-line\",\n          overflow: \"hidden\",\n        }}\n      />\n      <Card.Content extra>\n        <Grid>\n          <Grid.Column width={7} style={{ fontSize: \"10px\", color: \"black\" }}>\n            <Icon\n              style={{\n                fontSize: \"18px\",\n                verticalAlign: \"middle\",\n                marginRight: \"0px\",\n              }}\n              name=\"clock\"\n              color=\"blue\"\n            />{\" \"}\n            {days}D | {hours}H\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <Icon\n              name=\"flag\"\n              color={\n                bug.priority === \"High\"\n                  ? \"red\"\n                  : bug.priority === \"Medium\"\n                  ? \"yellow\"\n                  : \"green\"\n              }\n            />\n          </Grid.Column>\n          <Label\n            style={{\n              height: \"2.4em\",\n              position: \"absolute\",\n              marginTop: \"0.7em\",\n              marginLeft: \"-1.1em\",\n            }}\n            color=\"teal\"\n            ribbon=\"right\"\n          >\n            {bug.category}\n          </Label>\n        </Grid>\n      </Card.Content>\n      <p\n        style={{\n          height: \"10.7rem\",\n          whiteSpace: \"pre-line\",\n          overflow: \"hidden\",\n          padding: \"1rem 2rem\",\n          color: \"#555\",\n        }}\n      >\n        {bug.description}\n      </p>\n      <Card.Content extra>\n        <Grid columns={3}>\n          <Grid.Column>\n            <Icon name=\"user\" color=\"red\" style={{ padding: \"0px\" }} />{\" \"}\n            {bug.admin}\n          </Grid.Column>\n          <Grid.Column>\n            <Icon name=\"user\" color=\"green\" /> {bug.developer}\n          </Grid.Column>\n          <Grid.Column>\n            <Label\n              style={{ width: \"4rem\" }}\n              color={bug.status.toLowerCase() === \"open\" ? \"blue\" : \"red\"}\n              key=\"orange\"\n            >\n              {bug.status}\n            </Label>\n          </Grid.Column>\n        </Grid>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default BugListing;\n","import { observable, configure, runInAction, action, computed } from \"mobx\";\nimport axios from \"axios\";\n// import axios, { AxiosResponse } from \"axios\";\nimport { createContext } from \"react\";\nimport IBug from \"../models/bug\";\n\n// to simulate loading time\n// const sleep = (ms: number) => (response: AxiosResponse) =>\n//   new Promise<AxiosResponse>((resolve) =>\n//     setTimeout(() => resolve(response), ms)\n//   );\n\n// default url\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n// allow mobx actions\nconfigure({ enforceActions: \"always\" });\n\n// class starts here\nclass BugStore {\n  // ======================================== //\n  // observables\n  // ======================================== //\n\n  @observable bugRegistry = new Map();\n  @observable bug: IBug | null = null;\n  @observable loading: boolean = false;\n  @observable target: string = \"\";\n\n  // ======================================== //\n  // computed values\n  // ======================================== //\n\n  @computed get bugsByDate() {\n    const bugs = Array.from(this.bugRegistry.values());\n    return bugs.sort((a,b) => Date.parse(a.createdOn) - Date.parse(b.createdOn));\n  }\n\n  @computed get openBugs() {\n    const bugs = Array.from(this.bugRegistry.values());\n    const openBugs = bugs.filter(bug => bug.status === \"Open\")\n    return openBugs.sort((a,b) => Date.parse(a.createdOn) - Date.parse(b.createdOn))\n  }\n\n  @computed get closedBugs() {\n    const bugs = Array.from(this.bugRegistry.values());\n    const closedbugs = bugs.filter(bug => bug.status === \"Closed\");\n    return closedbugs.sort((a,b) => Date.parse(a.creatdOn) - Date.parse(b.createdOn))\n  }\n\n  // ======================================== //\n  // actions\n  // ======================================== //\n\n  // get all activities\n  @action loadBugs = async () => {\n    this.loading = true;\n    try {\n      const bugs = await axios.get<IBug[]>(\"/bugs\");\n      runInAction(\"loading bugs\", () => {\n        bugs.data.forEach((bug: IBug) => {\n          this.bugRegistry.set(bug.id, bug);\n        });\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      console.log(error);\n    }\n  };\n\n  // get specific bug\n  @action loadBug = async (id: string) => {\n    this.loading = true;\n    try {\n      const bug = await axios.get<IBug>(`/bugs/${id}`);\n      runInAction(\"get specific bug\", () => {\n        this.bug = bug.data;\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log(error);\n      runInAction(\"loading specific bug error\", () => {\n        this.loading = false;\n      });\n    }\n  };\n\n  // select a specific bug\n  @action selectBug = (id: string) => {\n    this.bug = this.bugRegistry.get(id);\n  };\n\n  // clear store bug\n  @action clearBug = () => {\n    this.bug = null;\n  };\n\n  // create new bug\n  @action createBug = async (bug: IBug) => {\n    this.loading = true;\n    try {\n      await axios.post<IBug>(\"/bugs/\", bug);\n      runInAction(\"creating new bug\", () => {\n        this.bugRegistry.set(bug.id, bug);\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(\"create new bug failed\", () => {\n        this.loading = false;\n      });\n      console.log(error);\n    }\n  };\n\n  // edit existing bug\n  @action editBug = async (bug: IBug) => {\n    this.loading = true;\n    try {\n      await axios.put<IBug>(`/bugs/${bug.id}`, bug);\n      runInAction(\"edit bug\", () => {\n        this.bugRegistry.set(bug.id, bug);\n        this.bug = bug;\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(\"edit bug error\", () => {\n        this.loading = false;\n      });\n      console.log(error);\n    }\n  };\n\n  // delete bug\n  @action deleteBug = async (id: string) => {\n    this.loading = true;\n    try {\n      await axios.delete(`/bugs/${id}`);\n      runInAction(\"delete bug\", () => {\n        this.bugRegistry.delete(id);\n        this.bug = null;\n        this.loading = false;\n        this.target = \"\";\n      })\n    } catch (error) {\n      runInAction(\"delete failed\", () => {\n        this.loading = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  }\n  // end of class BugStore\n}\n\n// special export for store\nexport default createContext(new BugStore());\n","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, {\n  useContext,\n  useEffect,\n  Fragment,\n  useState,\n  CSSProperties,\n} from \"react\";\nimport BugListing from \"./BugListing\";\nimport { Button, Grid } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport BugStore from \"../../../app/stores/bugStore\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\n\nconst Dashboard: React.FC = () => {\n  const bugStore = useContext(BugStore);\n\n  // import store\n  useEffect(() => {\n    bugStore.loadBugs();\n  }, [bugStore]);\n\n  // desconstruct\n  const { bugsByDate, openBugs, closedBugs, loading } = bugStore;\n\n  // query state\n  const [query, setQuery] = useState(bugsByDate);\n\n  useEffect(() => {\n    setQuery(openBugs);\n  }, [openBugs]);\n\n  // loading\n  if (loading) {\n    return <LoadingComponent content=\"loading content...\" />;\n  }\n\n  return (\n    <Fragment>\n      <div style={buttonDivStyles}>\n        <Grid columns={3} stackable container>\n          <Grid.Column>\n            <Button\n              style={query === openBugs ? clickedStyles : buttonStyles}\n              onClick={() => setQuery(openBugs)}\n            >\n              Open Tickets\n            </Button>\n          </Grid.Column>\n          <Grid.Column>\n            <Button\n              style={query === closedBugs ? clickedStyles : buttonStyles}\n              onClick={() => setQuery(closedBugs)}\n            >\n              Closed Tickets\n            </Button>\n          </Grid.Column>\n          <Grid.Column>\n            <Button\n              style={query === bugsByDate ? clickedStyles : buttonStyles}\n              onClick={() => setQuery(bugsByDate)}\n            >\n              All Tickets\n            </Button>\n          </Grid.Column>\n        </Grid>\n      </div>\n      <Grid stackable columns={3}>\n        {query.map((bug) => (\n          <Grid.Column key={bug.id}>\n            <Link to={`/bugs/${bug.id}`}>\n              <BugListing bug={bug} />\n            </Link>\n          </Grid.Column>\n        ))}\n      </Grid>\n    </Fragment>\n  );\n  // }\n};\n\n// Style Section\n\nconst buttonStyles: CSSProperties = {\n  color: \"#568CA9\",\n  backgroundColor: \"#f9f8f0\",\n  border: \"1px solid #568CA9\",\n  // margin: \"1rem\",\n  width: \"140px\",\n};\n\nconst clickedStyles: CSSProperties = {\n  color: \"#f9f8f0\",\n  backgroundColor: \"#568CA9\",\n  border: \"1px solid #568CA9\",\n  // margin: \"1rem\",\n  width: \"140px\",\n};\n\nconst buttonDivStyles: CSSProperties = {\n  padding: \"1rem\",\n  textAlign: \"center\",\n  margin: \"0 auto 2rem\",\n};\n\nexport default observer(Dashboard);\n","import React, { useContext, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport BugStore from \"../../../app/stores/bugStore\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport {\n  Segment,\n  Header,\n  Grid,\n  Icon,\n  Label,\n  Button,\n  Container,\n} from \"semantic-ui-react\";\n\n// set params to the id of the bug\ninterface DetailParams {\n  id: string;\n}\n\n//\nconst BugsDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  // import store\n  const bugStore = useContext(BugStore);\n  const { loading, loadBug, bug, deleteBug } = bugStore;\n\n  // load the bug using the params\n  useEffect(() => {\n    loadBug(match.params.id);\n  }, [loadBug, match.params.id]);\n\n  // handling a delete action\n  const handleDeleteBug = () => {\n    deleteBug(match.params.id).then(() => history.push(\"/bugs\"));\n  };\n\n  // handle closing a ticket\n  // const handleCloseTicket = () => {\n  //   console.log(bugStore.bug);\n  // };\n\n  // load icon while loading\n  if (loading || !bug) {\n    return <LoadingComponent content=\"loading content...\" />;\n  }\n\n  // time seperation\n  const date = bug.createdOn.split(\"T\")[0];\n  const time = bug.createdOn.split(\"T\")[1].slice(0, 8);\n\n  return (\n    <Segment raised>\n      <Grid style={{ marginBottom: \"1em\" }} stackable>\n        <Grid.Column width={8} floated=\"left\">\n          <Label\n            style={{\n              // marginTop: \"2em\",\n              // marginLeft: \"2em\",\n              color: \"white\",\n              backgroundColor: \"#bd4509\",\n            }}\n          >\n            Ticket Opened On {date} at {time}\n          </Label>\n        </Grid.Column>\n        <Grid.Column\n          width={8}\n          floated=\"right\"\n          verticalAlign=\"bottom\"\n          style={{ textAlign: \"right\" }}\n        >\n          <Icon name=\"user\" color=\"red\" /> {bug.admin}\n          <Icon style={{ marginLeft: \"2em\" }} name=\"user\" color=\"green\" />{\" \"}\n          {bug.developer}\n        </Grid.Column>\n      </Grid>\n      <Segment>\n        <Grid columns={3} divided stackable>\n          <Grid.Row\n            style={{\n              // height: \"3.8em\",\n              textAlign: \"center\",\n            }}\n          >\n            <Grid.Column style={headersStyle}>\n              <Label color=\"blue\">{bug.category}</Label>\n            </Grid.Column>\n            <Grid.Column style={headersStyle}>\n              <Label\n                color={bug.status.toUpperCase() === \"OPEN\" ? \"green\" : \"red\"}\n              >\n                {bug.status}\n              </Label>\n            </Grid.Column>\n            <Grid.Column style={headersStyle}>\n              <Icon\n                name=\"flag\"\n                size=\"big\"\n                color={\n                  bug.priority.toUpperCase() === \"HIGH\"\n                    ? \"red\"\n                    : bug.priority.toUpperCase() === \"MEDIUM\"\n                    ? \"yellow\"\n                    : \"green\"\n                }\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n\n      <Header>Title</Header>\n      <p style={{ marginLeft: \"20px\" }}>{bug.title}</p>\n\n      <Header>Description</Header>\n      <p style={{ marginLeft: \"20px\", whiteSpace: \"pre-line\" }}>\n        {bug.description}\n      </p>\n\n      <br />\n      <Container style={{ textAlign: \"center\", marginTop: \"4em\" }}>\n        <Button\n          as={Link}\n          to={`/edit/${bug.id}`}\n          style={{ width: \"9em\", margin: \"1rem\" }}\n          color=\"blue\"\n        >\n          Edit\n        </Button>\n        <Button\n          // onClick={handleDeleteBug}\n          onClick={() => {\n            if (\n              window.confirm(\"Are you sure you want to delete this ticket?\")\n            ) {\n              handleDeleteBug();\n            }\n          }}\n          style={{ width: \"9em\", margin: \"1rem\" }}\n          color=\"red\"\n        >\n          Delete\n        </Button>\n      </Container>\n    </Segment>\n  );\n};\n\nconst headersStyle = {\n  // marginLeft: \"1.2em\",\n};\n\nexport default observer(BugsDetails);\n","import React, {\r\n  useContext,\r\n  useState,\r\n  FormEvent,\r\n  useEffect,\r\n  CSSProperties,\r\n} from \"react\";\r\nimport BugStore from \"../../../app/stores/bugStore\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Segment,\r\n  TextArea,\r\n  Modal,\r\n  Header,\r\n  Icon,\r\n  Grid,\r\n} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport IBug from \"../../../app/models/bug\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { RouteComponentProps, Link } from \"react-router-dom\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst BugForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  // import store\r\n  const bugStore = useContext(BugStore);\r\n  const {\r\n    bug: existingBug,\r\n    loading,\r\n    createBug,\r\n    loadBug,\r\n    clearBug,\r\n    editBug,\r\n  } = bugStore;\r\n\r\n  // local state\r\n  const [bug, setBug] = useState<IBug>({\r\n    id: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    createdOn: \"\",\r\n    admin: \"\",\r\n    developer: \"\",\r\n    category: \"\",\r\n    priority: \"\",\r\n    status: \"\",\r\n    resolvedOn: \"\",\r\n  });\r\n\r\n  // local state for modal\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // handle form input changes\r\n  const handleInputChange = (\r\n    e: FormEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\r\n  ) => {\r\n    const { name, value } = e.currentTarget;\r\n    setBug({ ...bug, [name]: value });\r\n  };\r\n\r\n  // life cycle\r\n  useEffect(() => {\r\n    if (match.params.id && bug.id.length === 0) {\r\n      loadBug(match.params.id).then(\r\n        // the && below means execute the setBug part only if existingBug is available and not null\r\n        () => existingBug && setBug(existingBug)\r\n      );\r\n    }\r\n    // clean up\r\n    return clearBug();\r\n    // add dependancies so this life cycle doesn't run everytime the component loads\r\n  }, [loadBug, clearBug, existingBug, match.params.id, bug.id.length, bug]);\r\n\r\n  // handle form submit\r\n  const handleFormSubmit = () => {\r\n    if (\r\n      bug.admin === \"\" ||\r\n      bug.developer === \"\" ||\r\n      bug.category === \"\" ||\r\n      bug.priority === \"\" ||\r\n      bug.status === \"\" ||\r\n      bug.title === \"\" ||\r\n      bug.description === \"\"\r\n    ) {\r\n      setOpen(true);\r\n    } else {\r\n      if (bug.id.length === 0) {\r\n        let newDate: Date = new Date();\r\n        let newBug = {\r\n          ...bug,\r\n          id: uuid(),\r\n          createdOn: newDate.toJSON(),\r\n          // status: \"Open\",\r\n          resolvedOn: newDate.toJSON(),\r\n        };\r\n        createBug(newBug).then(() => history.push(`/bugs/${newBug.id}`));\r\n      } else {\r\n        // edit functionality goes here\r\n        editBug(bug).then(() => history.push(`/bugs/${bug.id}`));\r\n      }\r\n    }\r\n  };\r\n\r\n  // render\r\n  if (loading) {\r\n    return <LoadingComponent content=\"loading content...\" />;\r\n  }\r\n\r\n  return (\r\n    <Segment style={{ padding: \"4rem\" }}>\r\n      <Form onSubmit={handleFormSubmit}>\r\n        <Form.Field>\r\n          <label>Title</label>\r\n          <input\r\n            autoFocus\r\n            onChange={handleInputChange}\r\n            name=\"title\"\r\n            placeholder=\"Ticket Title\"\r\n            value={bug.title}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field style={{ marginTop: \"2rem\" }}>\r\n          <label>Description</label>\r\n          <TextArea\r\n            name=\"description\"\r\n            onChange={handleInputChange}\r\n            placeholder=\"Ticket Description\"\r\n            rows={10}\r\n            value={bug.description}\r\n          />\r\n        </Form.Field>\r\n        <Form.Group style={{ marginTop: \"2rem\", marginBottom: \"2rem\" }}>\r\n          <Form.Field>\r\n            <label>Assign Admin</label>\r\n            <select\r\n              name=\"admin\"\r\n              id=\"adminSelect\"\r\n              value={bug.admin}\r\n              onChange={handleInputChange}\r\n            >\r\n              <option key=\"0\" value=\"\">\r\n                Select...\r\n              </option>\r\n              <option key=\"1\" value=\"Manar\">\r\n                Manar\r\n              </option>\r\n              <option key=\"2\" value=\"David\">\r\n                David\r\n              </option>\r\n            </select>\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Assign Developer</label>\r\n            <select\r\n              name=\"developer\"\r\n              id=\"developerSelect\"\r\n              value={bug.developer}\r\n              onChange={handleInputChange}\r\n            >\r\n              <option key=\"0\" value=\"\">\r\n                Select...\r\n              </option>\r\n              <option key=\"1\" value=\"Ayman\">\r\n                Ayman\r\n              </option>\r\n              <option key=\"2\" value=\"Joan\">\r\n                Joan\r\n              </option>\r\n              <option key=\"3\" value=\"Adam\">\r\n                Adam\r\n              </option>\r\n              <option key=\"4\" value=\"Ali\">\r\n                Ali\r\n              </option>\r\n            </select>\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Category</label>\r\n            <select\r\n              name=\"category\"\r\n              id=\"categorySelect\"\r\n              value={bug.category}\r\n              onChange={handleInputChange}\r\n            >\r\n              <option key=\"0\" value=\"\">\r\n                Select...\r\n              </option>\r\n              <option key=\"1\" value=\"Hardware\">\r\n                Hardware\r\n              </option>\r\n              <option key=\"2\" value=\"Software\">\r\n                Software\r\n              </option>\r\n            </select>\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Priority</label>\r\n            <select\r\n              name=\"priority\"\r\n              id=\"prioritySelect\"\r\n              value={bug.priority}\r\n              onChange={handleInputChange}\r\n            >\r\n              <option key=\"0\" value=\"\">\r\n                Select...\r\n              </option>\r\n              <option key=\"1\" value=\"High\">\r\n                High\r\n              </option>\r\n              <option key=\"2\" value=\"Medium\">\r\n                Medium\r\n              </option>\r\n              <option key=\"3\" value=\"Low\">\r\n                Low\r\n              </option>\r\n            </select>\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Status</label>\r\n            <select\r\n              name=\"status\"\r\n              id=\"statusSelect\"\r\n              value={bug.status}\r\n              onChange={handleInputChange}\r\n            >\r\n              <option key=\"0\" value=\"\">\r\n                Select...\r\n              </option>\r\n              <option key=\"1\" value=\"Open\">\r\n                Open\r\n              </option>\r\n              <option key=\"2\" value=\"Closed\">\r\n                Closed\r\n              </option>\r\n            </select>\r\n          </Form.Field>\r\n        </Form.Group>\r\n        <Grid centered stackable padded>\r\n          <Button\r\n            floated=\"right\"\r\n            color=\"green\"\r\n            type=\"submit\"\r\n            style={{ width: \"8rem\" }}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            as={Link}\r\n            to={`/bugs/${bug.id}`}\r\n            floated=\"right\"\r\n            color=\"red\"\r\n            type=\"button\"\r\n            style={{ width: \"8rem\" }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Grid>\r\n      </Form>\r\n\r\n      <Modal\r\n        closeIcon\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n      >\r\n        <Header icon=\"warning\" content=\"Warning: missing data\" />\r\n        <Modal.Content>\r\n          <p style={warningStyle}>Please select a value for each field</p>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"green\" onClick={() => setOpen(false)}>\r\n            <Icon name=\"checkmark\" /> Ok\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nconst warningStyle: CSSProperties = {\r\n  color: \"red\",\r\n  fontWeight: 900,\r\n  fontSize: \"1rem\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nexport default observer(BugForm);\r\n","import React, { Fragment } from \"react\";\nimport HomePage from \"../../features/home/HomePage\";\nimport { Route, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport BugsDashboard from \"../../features/bugs/dashboard/BugsDashboard\";\nimport { Container } from \"semantic-ui-react\";\nimport BugsDetails from \"../../features/bugs/details/BugsDetails\";\nimport BugForm from \"../../features/bugs/form/BugForm\";\nimport { observer } from \"mobx-react-lite\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  return (\n    <Fragment>\n      <NavBar />\n      <Container style={{ marginTop: \"7em\" }}>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/bugs\" component={BugsDashboard} />\n        <Route path=\"/bugs/:id\" component={BugsDetails} />\n        <Route\n          key={location.key}\n          path={[\"/createBug\", \"/edit/:id\"]}\n          component={BugForm}\n        />\n      </Container>\n    </Fragment>\n  );\n};\n\n// IMPORTANT:\n// we use the Route Props here to get access to the location of the route/component\n// the reason for this is that we can use location.key (which changes with every different route) to RE-RENDER the component we're on,\n// which is in this case the BugForm. the reason for that is if we are in the edit page for example, and we click on the create bug\n// button, react won't know that it's a different component and it'll keep the state without updating it, so we need to do this so\n// that react knows this is a new route component and will recalculate what the state is (existing => new)\n// ** use this whenever the same component is used in more than 1 link\n// add the App type at the top, and the withRouter higher order function at the bottom to do this\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children;\n};\n\nexport default withRouter(ScrollToTop);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/app/layout/styles.css\";\nimport App from \"../src/app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"mobx-react-lite/batchingForReactDom\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}